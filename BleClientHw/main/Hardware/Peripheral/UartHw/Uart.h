
///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// INCLUDES /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include <stdint.h>

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// CLASSES/STRUCTURES ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template <class DERIVED_TYPE>
class Uart
{
    friend DERIVED_TYPE;
    DERIVED_TYPE & derivedType = static_cast <DERIVED_TYPE &> (*this);

    public:
        enum class EUart : uint8_t
        {
            e0,
            e1,
            e2,
            e3
        };

        Uart () = default;
        void Send    (EUart v_eUartNum, uint8_t * v_data, const uint16_t v_dataLen) { derivedType.Send    (v_data, v_dataLen); }
        void Receive (EUart v_eUartNum, uint8_t * v_data, const uint16_t v_dataLen) { derivedType.Receive (v_data, v_dataLen); }

    private:
        ~Uart () = default;
};

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////// END OF FILE ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
