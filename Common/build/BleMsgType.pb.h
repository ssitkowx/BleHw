// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BleMsgType.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BleMsgType_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BleMsgType_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BleMsgType_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BleMsgType_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BleMsgType_2eproto;
class BleMsgType;
struct BleMsgTypeDefaultTypeInternal;
extern BleMsgTypeDefaultTypeInternal _BleMsgType_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BleMsgType* Arena::CreateMaybeMessage<::BleMsgType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum BleMsgType_EOperatingMode : int {
  BleMsgType_EOperatingMode_eNormal = 0,
  BleMsgType_EOperatingMode_eStable = 1,
  BleMsgType_EOperatingMode_eEmpty = 2
};
bool BleMsgType_EOperatingMode_IsValid(int value);
constexpr BleMsgType_EOperatingMode BleMsgType_EOperatingMode_EOperatingMode_MIN = BleMsgType_EOperatingMode_eNormal;
constexpr BleMsgType_EOperatingMode BleMsgType_EOperatingMode_EOperatingMode_MAX = BleMsgType_EOperatingMode_eEmpty;
constexpr int BleMsgType_EOperatingMode_EOperatingMode_ARRAYSIZE = BleMsgType_EOperatingMode_EOperatingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BleMsgType_EOperatingMode_descriptor();
template<typename T>
inline const std::string& BleMsgType_EOperatingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BleMsgType_EOperatingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BleMsgType_EOperatingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BleMsgType_EOperatingMode_descriptor(), enum_t_value);
}
inline bool BleMsgType_EOperatingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BleMsgType_EOperatingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BleMsgType_EOperatingMode>(
    BleMsgType_EOperatingMode_descriptor(), name, value);
}
// ===================================================================

class BleMsgType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BleMsgType) */ {
 public:
  inline BleMsgType() : BleMsgType(nullptr) {}
  ~BleMsgType() override;
  explicit constexpr BleMsgType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BleMsgType(const BleMsgType& from);
  BleMsgType(BleMsgType&& from) noexcept
    : BleMsgType() {
    *this = ::std::move(from);
  }

  inline BleMsgType& operator=(const BleMsgType& from) {
    CopyFrom(from);
    return *this;
  }
  inline BleMsgType& operator=(BleMsgType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BleMsgType& default_instance() {
    return *internal_default_instance();
  }
  static inline const BleMsgType* internal_default_instance() {
    return reinterpret_cast<const BleMsgType*>(
               &_BleMsgType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BleMsgType& a, BleMsgType& b) {
    a.Swap(&b);
  }
  inline void Swap(BleMsgType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BleMsgType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BleMsgType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BleMsgType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BleMsgType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BleMsgType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BleMsgType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BleMsgType";
  }
  protected:
  explicit BleMsgType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BleMsgType_EOperatingMode EOperatingMode;
  static constexpr EOperatingMode eNormal =
    BleMsgType_EOperatingMode_eNormal;
  static constexpr EOperatingMode eStable =
    BleMsgType_EOperatingMode_eStable;
  static constexpr EOperatingMode eEmpty =
    BleMsgType_EOperatingMode_eEmpty;
  static inline bool EOperatingMode_IsValid(int value) {
    return BleMsgType_EOperatingMode_IsValid(value);
  }
  static constexpr EOperatingMode EOperatingMode_MIN =
    BleMsgType_EOperatingMode_EOperatingMode_MIN;
  static constexpr EOperatingMode EOperatingMode_MAX =
    BleMsgType_EOperatingMode_EOperatingMode_MAX;
  static constexpr int EOperatingMode_ARRAYSIZE =
    BleMsgType_EOperatingMode_EOperatingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EOperatingMode_descriptor() {
    return BleMsgType_EOperatingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& EOperatingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EOperatingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EOperatingMode_Name.");
    return BleMsgType_EOperatingMode_Name(enum_t_value);
  }
  static inline bool EOperatingMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EOperatingMode* value) {
    return BleMsgType_EOperatingMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDataFieldNumber = 3,
    kIdFieldNumber = 1,
    kEOperatingModeFieldNumber = 4,
  };
  // optional string Name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string Data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional .BleMsgType.EOperatingMode eOperatingMode = 4;
  bool has_eoperatingmode() const;
  private:
  bool _internal_has_eoperatingmode() const;
  public:
  void clear_eoperatingmode();
  ::BleMsgType_EOperatingMode eoperatingmode() const;
  void set_eoperatingmode(::BleMsgType_EOperatingMode value);
  private:
  ::BleMsgType_EOperatingMode _internal_eoperatingmode() const;
  void _internal_set_eoperatingmode(::BleMsgType_EOperatingMode value);
  public:

  // @@protoc_insertion_point(class_scope:BleMsgType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t id_;
  int eoperatingmode_;
  friend struct ::TableStruct_BleMsgType_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BleMsgType

// optional uint32 Id = 1;
inline bool BleMsgType::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BleMsgType::has_id() const {
  return _internal_has_id();
}
inline void BleMsgType::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BleMsgType::_internal_id() const {
  return id_;
}
inline uint32_t BleMsgType::id() const {
  // @@protoc_insertion_point(field_get:BleMsgType.Id)
  return _internal_id();
}
inline void BleMsgType::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void BleMsgType::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BleMsgType.Id)
}

// optional string Name = 2;
inline bool BleMsgType::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BleMsgType::has_name() const {
  return _internal_has_name();
}
inline void BleMsgType::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BleMsgType::name() const {
  // @@protoc_insertion_point(field_get:BleMsgType.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleMsgType::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BleMsgType.Name)
}
inline std::string* BleMsgType::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:BleMsgType.Name)
  return _s;
}
inline const std::string& BleMsgType::_internal_name() const {
  return name_.Get();
}
inline void BleMsgType::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleMsgType::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleMsgType::release_name() {
  // @@protoc_insertion_point(field_release:BleMsgType.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BleMsgType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BleMsgType.Name)
}

// optional string Data = 3;
inline bool BleMsgType::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BleMsgType::has_data() const {
  return _internal_has_data();
}
inline void BleMsgType::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BleMsgType::data() const {
  // @@protoc_insertion_point(field_get:BleMsgType.Data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BleMsgType::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BleMsgType.Data)
}
inline std::string* BleMsgType::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:BleMsgType.Data)
  return _s;
}
inline const std::string& BleMsgType::_internal_data() const {
  return data_.Get();
}
inline void BleMsgType::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BleMsgType::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BleMsgType::release_data() {
  // @@protoc_insertion_point(field_release:BleMsgType.Data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BleMsgType::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BleMsgType.Data)
}

// optional .BleMsgType.EOperatingMode eOperatingMode = 4;
inline bool BleMsgType::_internal_has_eoperatingmode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BleMsgType::has_eoperatingmode() const {
  return _internal_has_eoperatingmode();
}
inline void BleMsgType::clear_eoperatingmode() {
  eoperatingmode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::BleMsgType_EOperatingMode BleMsgType::_internal_eoperatingmode() const {
  return static_cast< ::BleMsgType_EOperatingMode >(eoperatingmode_);
}
inline ::BleMsgType_EOperatingMode BleMsgType::eoperatingmode() const {
  // @@protoc_insertion_point(field_get:BleMsgType.eOperatingMode)
  return _internal_eoperatingmode();
}
inline void BleMsgType::_internal_set_eoperatingmode(::BleMsgType_EOperatingMode value) {
  assert(::BleMsgType_EOperatingMode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  eoperatingmode_ = value;
}
inline void BleMsgType::set_eoperatingmode(::BleMsgType_EOperatingMode value) {
  _internal_set_eoperatingmode(value);
  // @@protoc_insertion_point(field_set:BleMsgType.eOperatingMode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BleMsgType_EOperatingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BleMsgType_EOperatingMode>() {
  return ::BleMsgType_EOperatingMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BleMsgType_2eproto
